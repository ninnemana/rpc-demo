// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vinyltap.proto

package vinyltap

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Album struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Artist               string   `protobuf:"bytes,2,opt,name=artist,proto3" json:"artist,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ReleaseDate          int64    `protobuf:"varint,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Songs                []string `protobuf:"bytes,5,rep,name=songs,proto3" json:"songs,omitempty"`
	Tombstoned           bool     `protobuf:"varint,6,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Album) Reset()         { *m = Album{} }
func (m *Album) String() string { return proto.CompactTextString(m) }
func (*Album) ProtoMessage()    {}
func (*Album) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0181488c785c5a2, []int{0}
}

func (m *Album) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Album.Unmarshal(m, b)
}
func (m *Album) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Album.Marshal(b, m, deterministic)
}
func (m *Album) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Album.Merge(m, src)
}
func (m *Album) XXX_Size() int {
	return xxx_messageInfo_Album.Size(m)
}
func (m *Album) XXX_DiscardUnknown() {
	xxx_messageInfo_Album.DiscardUnknown(m)
}

var xxx_messageInfo_Album proto.InternalMessageInfo

func (m *Album) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Album) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *Album) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Album) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *Album) GetSongs() []string {
	if m != nil {
		return m.Songs
	}
	return nil
}

func (m *Album) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func init() {
	proto.RegisterType((*Album)(nil), "vinyltap.Album")
}

func init() { proto.RegisterFile("vinyltap.proto", fileDescriptor_b0181488c785c5a2) }

var fileDescriptor_b0181488c785c5a2 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xe3, 0x26, 0xa4, 0xb3, 0x85, 0xd2, 0x11, 0x12, 0xde, 0x6c, 0x05, 0x47, 0x95, 0x10,
	0x91, 0x69, 0xed, 0xd4, 0xed, 0x82, 0xb6, 0xcb, 0xd2, 0xda, 0xcd, 0x82, 0x2a, 0x55, 0xab, 0x95,
	0x9b, 0x72, 0x8b, 0x26, 0xf6, 0x89, 0x33, 0xac, 0x3d, 0x63, 0xcd, 0x4c, 0x7e, 0xf6, 0x16, 0xde,
	0x20, 0xdc, 0x73, 0x81, 0x78, 0x00, 0xde, 0x85, 0x57, 0xe0, 0x19, 0xb8, 0x46, 0xb6, 0x93, 0xd5,
	0x8a, 0x5c, 0xec, 0x5e, 0xcd, 0xcc, 0x77, 0xbe, 0xef, 0x1b, 0x1f, 0x7d, 0xc7, 0x43, 0x3e, 0x9a,
	0x73, 0xf1, 0x3a, 0x37, 0xac, 0xf4, 0x4a, 0x25, 0x8d, 0xa4, 0xdd, 0xcd, 0xb9, 0x77, 0x98, 0x49,
	0x99, 0xe5, 0xe8, 0xb3, 0x92, 0xfb, 0x4c, 0x08, 0x69, 0x98, 0xe1, 0x52, 0xe8, 0x86, 0xd7, 0x3b,
	0xae, 0x97, 0xe4, 0x24, 0x43, 0x71, 0xa2, 0x17, 0x2c, 0xcb, 0x50, 0xf9, 0xb2, 0xac, 0x19, 0xdb,
	0xec, 0xa3, 0x7f, 0x5b, 0xa4, 0x1d, 0xe6, 0xe3, 0x59, 0x41, 0x8f, 0x49, 0x8b, 0xa7, 0x8e, 0x05,
	0x56, 0xbf, 0x1d, 0x1d, 0xae, 0xc2, 0x87, 0x6e, 0xeb, 0x66, 0x18, 0x1c, 0xd4, 0x35, 0xb8, 0x49,
	0x51, 0x18, 0x3e, 0xe1, 0xa8, 0xbc, 0x2b, 0x2b, 0x6e, 0xf1, 0x94, 0x7e, 0x4d, 0x3a, 0x4c, 0x19,
	0xae, 0x8d, 0xd3, 0x02, 0xab, 0xbf, 0x1b, 0x7d, 0xb6, 0x0a, 0x1f, 0xb9, 0x9d, 0xb0, 0x86, 0x82,
	0x83, 0x18, 0x13, 0xa9, 0x52, 0x2e, 0x32, 0x68, 0x10, 0x2f, 0x5e, 0xb3, 0xe9, 0x29, 0x69, 0x1b,
	0x6e, 0x72, 0x74, 0xec, 0x5a, 0xf6, 0x68, 0x15, 0x3a, 0x6e, 0x7b, 0x54, 0x21, 0xc1, 0x7e, 0xbd,
	0x80, 0x9c, 0x40, 0x7d, 0xa9, 0x17, 0x37, 0x4c, 0xca, 0xc8, 0x9e, 0xc2, 0x1c, 0x99, 0xc6, 0x9f,
	0x52, 0x66, 0xd0, 0xd9, 0x01, 0xab, 0x6f, 0x47, 0xdf, 0xad, 0xc2, 0xa7, 0xee, 0x5e, 0xdc, 0x14,
	0x60, 0xc8, 0x0c, 0x06, 0x5f, 0xdd, 0x0b, 0xbe, 0x84, 0x11, 0x2f, 0x50, 0x1b, 0x56, 0x94, 0x95,
	0x93, 0x99, 0x62, 0xe3, 0xf6, 0xa5, 0x86, 0xb5, 0x09, 0x54, 0x26, 0x5e, 0xfc, 0x60, 0x7d, 0xac,
	0x94, 0xf4, 0x31, 0x69, 0x6b, 0x29, 0x32, 0xed, 0xb4, 0xc1, 0xee, 0xef, 0x46, 0x9f, 0xaf, 0xc2,
	0x43, 0x97, 0x8c, 0x14, 0x4b, 0x5e, 0xc1, 0x6d, 0xd5, 0xd0, 0x83, 0x66, 0x9f, 0x57, 0xad, 0xfc,
	0x65, 0x59, 0x71, 0xc3, 0xa6, 0x17, 0x84, 0x18, 0x59, 0x8c, 0xb5, 0x91, 0x02, 0x53, 0xa7, 0x03,
	0x56, 0xbf, 0x1b, 0xf5, 0x56, 0xe1, 0xa7, 0x2e, 0x19, 0xbd, 0x81, 0x83, 0xdd, 0x21, 0xe6, 0x68,
	0x30, 0xbd, 0xf4, 0xe2, 0xb7, 0xd8, 0xc1, 0xaf, 0x16, 0xb1, 0x47, 0xac, 0xa4, 0x97, 0xa4, 0xfb,
	0x03, 0x9a, 0x26, 0x82, 0x7d, 0xef, 0x4d, 0xe6, 0x35, 0xd0, 0xfb, 0x3f, 0x70, 0xb4, 0xff, 0xcb,
	0xdf, 0xff, 0xfc, 0xd6, 0xda, 0xa5, 0x1f, 0xf8, 0xf3, 0x53, 0xdf, 0xb0, 0x72, 0x60, 0xd1, 0xa7,
	0xc4, 0xbe, 0x43, 0xf3, 0x1e, 0x5a, 0x5a, 0x6b, 0xf7, 0x7a, 0x1b, 0xed, 0x85, 0xe5, 0x46, 0x7f,
	0xec, 0xac, 0xc2, 0xdf, 0x77, 0xe8, 0x9f, 0x16, 0xe9, 0xfe, 0xb8, 0x66, 0x1f, 0x7d, 0x4b, 0x3e,
	0x0c, 0x73, 0x5c, 0xc2, 0x0b, 0x2e, 0x04, 0x16, 0x4c, 0x50, 0x67, 0x6a, 0x4c, 0xa9, 0x2f, 0x7c,
	0x7f, 0xb1, 0x58, 0x78, 0x62, 0x8d, 0x7a, 0x52, 0x65, 0xbd, 0x03, 0x96, 0xe3, 0xf2, 0xea, 0x6d,
	0xc8, 0xbd, 0x27, 0x9f, 0x44, 0x77, 0x43, 0x38, 0x3b, 0xb9, 0xce, 0xd9, 0x4c, 0x23, 0xdc, 0xf2,
	0x04, 0x85, 0x46, 0xfa, 0x6c, 0x63, 0x92, 0x71, 0x33, 0x9d, 0x8d, 0xbd, 0x44, 0x16, 0xfe, 0x46,
	0xc8, 0x7c, 0x55, 0x26, 0x27, 0x29, 0x16, 0xd2, 0x1f, 0xe7, 0x72, 0xec, 0x17, 0x4c, 0x1b, 0x54,
	0xfe, 0xed, 0xcd, 0xf5, 0xf3, 0x17, 0x77, 0xcf, 0x3d, 0xb3, 0x34, 0x81, 0x7d, 0xea, 0x0d, 0x5c,
	0xdb, 0x6a, 0xed, 0x04, 0x1f, 0xb3, 0xb2, 0xcc, 0x79, 0x52, 0x4f, 0xb1, 0xff, 0xb3, 0x96, 0xe2,
	0x62, 0x0b, 0x89, 0xaf, 0x88, 0xfd, 0x78, 0x30, 0xa0, 0x4f, 0xc8, 0x37, 0x31, 0x9a, 0x99, 0x12,
	0x98, 0xc2, 0x62, 0x8a, 0xa2, 0x1e, 0x07, 0x8d, 0x6a, 0x8e, 0x0a, 0x26, 0x8c, 0xe7, 0x1a, 0x8c,
	0x84, 0x85, 0xe2, 0x06, 0xab, 0x4d, 0x55, 0x54, 0xa8, 0x4b, 0x29, 0x34, 0xc6, 0x67, 0xc4, 0x3e,
	0x1f, 0x9c, 0xd3, 0x63, 0xe2, 0x6e, 0x3b, 0x28, 0xd4, 0x72, 0xa6, 0x12, 0x84, 0x54, 0xa2, 0x06,
	0x21, 0x0d, 0xe0, 0xb2, 0x1e, 0xf2, 0xef, 0x2b, 0xd1, 0x13, 0x7a, 0x49, 0x9e, 0x6d, 0x8b, 0x18,
	0xa8, 0xfa, 0xa7, 0x00, 0xae, 0x41, 0xa3, 0x30, 0x9b, 0x1b, 0x5f, 0xde, 0x8f, 0x40, 0x96, 0xa8,
	0xea, 0xaf, 0x07, 0xb3, 0xe0, 0x09, 0xc6, 0x37, 0xc4, 0x0e, 0x06, 0x03, 0x1a, 0x91, 0xf3, 0x77,
	0xf8, 0xcc, 0x92, 0x04, 0xb5, 0x9e, 0xcc, 0xf2, 0xfc, 0x75, 0x63, 0x3a, 0x66, 0xc9, 0x2b, 0x4a,
	0x48, 0xb7, 0xd7, 0x69, 0x42, 0x57, 0x11, 0x79, 0xb8, 0x09, 0x16, 0x86, 0x58, 0x48, 0x88, 0x5f,
	0x5e, 0xc3, 0x1d, 0xaa, 0x39, 0x4f, 0x90, 0x7e, 0xf1, 0x5e, 0x99, 0x8c, 0x3b, 0xf5, 0x53, 0x71,
	0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xa0, 0x99, 0xd6, 0x92, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TapClient is the client API for Tap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TapClient interface {
	GetAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (Tap_GetAlbumClient, error)
	Set(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error)
}

type tapClient struct {
	cc *grpc.ClientConn
}

func NewTapClient(cc *grpc.ClientConn) TapClient {
	return &tapClient{cc}
}

func (c *tapClient) GetAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (Tap_GetAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tap_serviceDesc.Streams[0], "/vinyltap.Tap/GetAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &tapGetAlbumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tap_GetAlbumClient interface {
	Recv() (*Album, error)
	grpc.ClientStream
}

type tapGetAlbumClient struct {
	grpc.ClientStream
}

func (x *tapGetAlbumClient) Recv() (*Album, error) {
	m := new(Album)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tapClient) Set(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/vinyltap.Tap/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapServer is the server API for Tap service.
type TapServer interface {
	GetAlbum(*Album, Tap_GetAlbumServer) error
	Set(context.Context, *Album) (*Album, error)
}

// UnimplementedTapServer can be embedded to have forward compatible implementations.
type UnimplementedTapServer struct {
}

func (*UnimplementedTapServer) GetAlbum(req *Album, srv Tap_GetAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (*UnimplementedTapServer) Set(ctx context.Context, req *Album) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterTapServer(s *grpc.Server, srv TapServer) {
	s.RegisterService(&_Tap_serviceDesc, srv)
}

func _Tap_GetAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Album)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapServer).GetAlbum(m, &tapGetAlbumServer{stream})
}

type Tap_GetAlbumServer interface {
	Send(*Album) error
	grpc.ServerStream
}

type tapGetAlbumServer struct {
	grpc.ServerStream
}

func (x *tapGetAlbumServer) Send(m *Album) error {
	return x.ServerStream.SendMsg(m)
}

func _Tap_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vinyltap.Tap/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapServer).Set(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vinyltap.Tap",
	HandlerType: (*TapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Tap_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAlbum",
			Handler:       _Tap_GetAlbum_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vinyltap.proto",
}
